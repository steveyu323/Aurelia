pheatmap(norm_OEsig,
color = heat_colors,
cluster_rows = T,
show_rownames = T,
annotation = annotation,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 10,
height = 20)
### Run pheatmap
pheatmap(norm_OEsig,
color = heat_colors,
cluster_rows = F,
show_rownames = T,
annotation = annotation,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 10,
height = 20)
# normalized_counts
norm_OEsig
### For now, use regeneration VS non-regeneration at 27h as example
sec.res.rege27.sig
### For now, use regeneration VS non-regeneration at 27h as example
normalized_counts.tmp = merge(normalized_counts,sec.res.rege27.sig,by = "gene")
normalized_counts.tmp
?merge
norm_OEsig <- normalized_counts[,c(1,2,3,10,11)] %>%
filter(gene %in% sec.res.rege27.sig$gene[sec.res.rege27.sig$in.rre]) %>%
data.frame()
normalized_counts.tmp
norm_OEsig
merge(norm_OEsig,sec.res.rege27.sig,by = "gene",)
merge(norm_OEsig,select(sec.res.rege27,c("gene","name")).sig,by = "gene",)
merge(norm_OEsig,select(sec.res.rege27.sig,c("gene","name")),by = "gene")
norm_OEsig = merge(norm_OEsig,select(sec.res.rege27.sig,c("gene","name")),by = "gene") %>%
column_to_rownames(var = "name") %>%
select(-gene)
norm_OEsig
res.rege.sig
blastx_anno_ensm = read.csv("../out/blastx_aurelia_mus_map_ensm.csv")
blastx_anno_ensm = blastx_anno_ensm %>%
filter(name != "nan")
blastx_anno_ensm
annotate.overlap = function(dge.df,gene.list.s2,gene.list.s4,gene.list.s7) {
df_merged = merge(dge.df, blastx_anno, by.x = "gene", by.y = "query.acc.ver")
df_merged_anno = dplyr::select(df_merged,c("gene","log2FoldChange","padj","subject.acc.ver","evalue"))
df_merged_anno_ensm = merge(df_merged_anno, blastx_anno_ensm, by.x = "subject.acc.ver", by.y = "initial_alias")
df_merged_anno_ensm$in.rre = (df_merged_anno_ensm$converted_alias %in% gene.list.s2)
df_merged_anno_ensm$in.rrp = (df_merged_anno_ensm$converted_alias %in% gene.list.s4)
df_merged_anno_ensm$in.blastema = (df_merged_anno_ensm$converted_alias %in% gene.list.s7)
df_merged_anno_ensm = df_merged_anno_ensm %>%
group_by(converted_alias) %>%
dplyr::slice(1) %>%
data.frame()
return(df_merged_anno_ensm)
}
sec.res.rege.sig = annotate.overlap(res.rege.sig,s2_shared_rre.mapped$ortholog_ensg,
s4_shared_rrp.mapped$ortholog_ensg,
s7_blastema_makrkers.mapped$ortholog_ensg)
sec.res.rege27.sig = annotate.overlap(res.rege27.sig,s2_shared_rre.mapped$ortholog_ensg,
s4_shared_rrp.mapped$ortholog_ensg,
s7_blastema_makrkers.mapped$ortholog_ensg)
sec.res.rege51.sig = annotate.overlap(res.rege51.sig,s2_shared_rre.mapped$ortholog_ensg,
s4_shared_rrp.mapped$ortholog_ensg,
s7_blastema_makrkers.mapped$ortholog_ensg)
sec.res.ampu.sig = annotate.overlap(res.ampu.sig,s2_shared_rre.mapped$ortholog_ensg,
s4_shared_rrp.mapped$ortholog_ensg,
s7_blastema_makrkers.mapped$ortholog_ensg)
# number genes overlapping between DGE result and literature report
colSums(sec.res.rege.sig[,c(10,11,12)])
colSums(sec.res.rege27.sig[,c(10,11,12)])
colSums(sec.res.rege51.sig[,c(10,11,12)])
colSums(sec.res.ampu.sig[,c(10,11,12)])
sec.res.rege27.sig[sec.res.rege27.sig$in.rre,]
### For now, use regeneration VS non-regeneration at 27h as example
norm_OEsig <- normalized_counts[,c(1,2,3,10,11)] %>%
filter(gene %in% sec.res.rege27.sig$gene[sec.res.rege27.sig$in.rre]) %>%
data.frame()
norm_OEsig = merge(norm_OEsig,select(sec.res.rege27.sig,c("gene","name")),by = "gene") %>%
column_to_rownames(var = "name") %>%
select(-gene)
norm_OEsig
### For now, use regeneration VS non-regeneration at 27h as example
norm_OEsig <- normalized_counts[,c(1,2,3,10,11)] %>%
filter(gene %in% sec.res.rege27.sig$gene[sec.res.rege27.sig$in.rre]) %>%
data.frame()
norm_OEsig = merge(norm_OEsig,select(sec.res.rege27.sig,c("gene","name")),by = "gene") %>%
column_to_rownames(var = "name") %>%
select(-gene)
norm_OEsig
### Annotate our heatmap (optional)
annotation <- metadata %>%
select(sample, regeneration) %>%
data.frame(row.names = "sample")
# annotation
### Set a color palette
heat_colors <- brewer.pal(6, "YlOrRd")
### Run pheatmap
pheatmap(norm_OEsig,
color = heat_colors,
cluster_rows = F,
show_rownames = T,
annotation = annotation,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 10,
height = 20)
norm_OEsig <- normalized_counts[,c(1,2,3,10,11)] %>%
filter(gene %in% sec.res.rege27.sig$gene[sec.res.rege27.sig$in.blastema]) %>%
data.frame()
norm_OEsig = merge(norm_OEsig,select(sec.res.rege27.sig,c("gene","name")),by = "gene") %>%
column_to_rownames(var = "name") %>%
select(-gene)
norm_OEsig
### Annotate our heatmap (optional)
annotation <- metadata %>%
select(sample, regeneration) %>%
data.frame(row.names = "sample")
# annotation
### Set a color palette
heat_colors <- brewer.pal(6, "YlOrRd")
### Run pheatmap
pheatmap(norm_OEsig,
color = heat_colors,
cluster_rows = F,
show_rownames = T,
annotation = annotation,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 10,
height = 20)
norm_OEsig <- normalized_counts[,c(1,2,3,10,11)] %>%
filter(gene %in% sec.res.rege27.sig$gene[sec.res.rege27.sig$in.blastema]) %>%
data.frame()
norm_OEsig = merge(norm_OEsig,select(sec.res.rege27.sig,c("gene","name")),by = "gene") %>%
column_to_rownames(var = "name") %>%
select(-gene)
norm_OEsig
### Annotate our heatmap (optional)
annotation <- metadata %>%
select(sample, regeneration) %>%
data.frame(row.names = "sample")
# annotation
### Set a color palette
heat_colors <- brewer.pal(6, "YlOrRd")
### Run pheatmap
pheatmap(norm_OEsig,
color = heat_colors,
cluster_rows = F,
show_rownames = T,
annotation = annotation,
border_color = NA,
fontsize = 7,
scale = "row",
fontsize_row = 10,
height = 20)
norm_OEsig <- normalized_counts[,c(1,2,3,10,11)] %>%
filter(gene %in% sec.res.rege27.sig$gene[sec.res.rege27.sig$in.blastema]) %>%
data.frame()
norm_OEsig = merge(norm_OEsig,select(sec.res.rege27.sig,c("gene","name")),by = "gene") %>%
column_to_rownames(var = "name") %>%
select(-gene)
norm_OEsig
### Annotate our heatmap (optional)
annotation <- metadata %>%
select(sample, regeneration) %>%
data.frame(row.names = "sample")
# annotation
### Set a color palette
heat_colors <- brewer.pal(6, "YlOrRd")
### Run pheatmap
pheatmap(norm_OEsig,
color = heat_colors,
cluster_rows = F,
show_rownames = T,
annotation = annotation,
border_color = NA,
fontsize = 5,
scale = "row",
fontsize_row = 10,
height = 20)
norm_OEsig <- normalized_counts[,c(1,2,3,10,11)] %>%
filter(gene %in% sec.res.rege27.sig$gene[sec.res.rege27.sig$in.blastema]) %>%
data.frame()
norm_OEsig = merge(norm_OEsig,select(sec.res.rege27.sig,c("gene","name")),by = "gene") %>%
column_to_rownames(var = "name") %>%
select(-gene)
norm_OEsig
### Annotate our heatmap (optional)
annotation <- metadata %>%
select(sample, regeneration) %>%
data.frame(row.names = "sample")
# annotation
### Set a color palette
heat_colors <- brewer.pal(6, "YlOrRd")
### Run pheatmap
pheatmap(norm_OEsig,
color = heat_colors,
cluster_rows = F,
show_rownames = T,
annotation = annotation,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 7,
height = 20)
norm_OEsig <- normalized_counts[,c(1,2,3,6,7,8,9,10,11)] %>%
filter(gene %in% sec.res.rege.sig$gene[sec.res.rege.sig$in.blastema]) %>%
data.frame() %>%
column_to_rownames(var = "gene")
norm_OEsig = merge(norm_OEsig,select(sec.res.rege.sig,c("gene","name")),by = "gene") %>%
column_to_rownames(var = "name") %>%
select(-gene)
norm_OEsig <- normalized_counts[,c(1,2,3,6,7,8,9,10,11)] %>%
filter(gene %in% sec.res.rege.sig$gene[sec.res.rege.sig$in.blastema]) %>%
data.frame()
norm_OEsig = merge(norm_OEsig,select(sec.res.rege.sig,c("gene","name")),by = "gene") %>%
column_to_rownames(var = "name") %>%
select(-gene)
norm_OEsig
norm_OEsig <- normalized_counts[,c(1,2,3,6,7,8,9,10,11)] %>%
filter(gene %in% sec.res.rege.sig$gene[sec.res.rege.sig$in.blastema]) %>%
data.frame()
norm_OEsig = merge(norm_OEsig,select(sec.res.rege.sig,c("gene","name")),by = "gene") %>%
column_to_rownames(var = "name") %>%
select(-gene)
norm_OEsig
### Annotate our heatmap (optional)
annotation <- metadata %>%
select(sample, regeneration) %>%
data.frame(row.names = "sample")
# annotation
### Set a color palette
heat_colors <- brewer.pal(6, "YlOrRd")
### Run pheatmap
pheatmap(norm_OEsig,
color = heat_colors,
cluster_rows = F,
show_rownames = T,
annotation = annotation,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 7,
height = 20)
norm_OEsig <- normalized_counts[,c(1,2,3,4,5,6,7,8,9,10,11)] %>%
filter(gene %in% res.ampu.sig$gene) %>%
data.frame() %>%
column_to_rownames(var = "gene")
# normalized_counts
norm_OEsig
### Annotate our heatmap (optional)
annotation <- metadata %>%
select(sample, amputation) %>%
data.frame(row.names = "sample")
annotation
### Set a color palette
heat_colors <- brewer.pal(6, "YlOrRd")
### Run pheatmap
pheatmap(norm_OEsig,
color = heat_colors,
cluster_rows = T,
show_rownames = F,
annotation = annotation,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 10,
height = 20)
?pheatmap
norm_OEsig <- normalized_counts[,c(1,2,3,4,5,6,7,8,9,10,11)] %>%
filter(gene %in% res.ampu.sig$gene) %>%
data.frame() %>%
column_to_rownames(var = "gene")
# normalized_counts
norm_OEsig
### Annotate our heatmap (optional)
annotation <- metadata %>%
select(sample, amputation) %>%
data.frame(row.names = "sample")
annotation
### Set a color palette
heat_colors <- brewer.pal(6, "YlOrRd")
### Run pheatmap
pheatmap(norm_OEsig,
color = heat_colors,
cluster_rows = T,
show_rownames = F,
annotation = annotation,
border_color = NA,
fontsize = 10,
scale = "none",
fontsize_row = 10,
height = 20)
# Z-scores are computed on a gene-by-gene basis by subtracting the mean and then dividing by the standard deviation. The Z-scores are computed after the clustering, so that it only affects the graphical aesthetics and the color visualization is improved.
norm_OEsig <- normalized_counts[,c(1,2,3,4,5,6,7,8,9,10,11)] %>%
filter(gene %in% res.ampu.sig$gene) %>%
data.frame() %>%
column_to_rownames(var = "gene")
# normalized_counts
norm_OEsig
### Annotate our heatmap (optional)
annotation <- metadata %>%
select(sample, amputation) %>%
data.frame(row.names = "sample")
annotation
### Set a color palette
heat_colors <- brewer.pal(6, "YlOrRd")
### Run pheatmap
pheatmap(norm_OEsig,
color = heat_colors,
cluster_rows = T,
show_rownames = F,
annotation = annotation,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 10,
height = 20)
# Z-scores are computed on a gene-by-gene basis by subtracting the mean and then dividing by the standard deviation. The Z-scores are computed after the clustering, so that it only affects the graphical aesthetics and the color visualization is improved.
res.ampu.sig$gene
res.ampu.sig
res.ampu.sig %>% arrange(padj)
res.ampu.sig %>% arrange(padj) %>% select(gene)
res.ampu.sig %>% arrange(padj) %>% select(gene) [1:1000]
res.ampu.sig %>% arrange(padj) %>% select(gene) [1:1000,]
res.ampu.sig
res.ampu.sig %>% arrange(padj) %>% select(gene)
c(res.ampu.sig %>% arrange(padj) %>% select(gene))
c(res.ampu.sig %>% arrange(padj) %>% select(gene))[1:1000]
c(res.ampu.sig %>% arrange(padj) %>% select(gene))
c(res.ampu.sig %>% arrange(padj) %>% select(gene))$gene
c(res.ampu.sig %>% arrange(padj) %>% select(gene))$gene[1:1000]
# top 1000 gene order by padj value
gene.ls = c(res.ampu.sig %>% arrange(padj) %>% select(gene))$gene[1:1000]
res.ampu.sig
norm_OEsig <- normalized_counts[,c(1,2,3,4,5,6,7,8,9,10,11)] %>%
filter(gene %in% gene.ls) %>%
data.frame() %>%
column_to_rownames(var = "gene")
# normalized_counts
norm_OEsig
### Annotate our heatmap (optional)
annotation <- metadata %>%
select(sample, amputation) %>%
data.frame(row.names = "sample")
annotation
### Set a color palette
heat_colors <- brewer.pal(6, "YlOrRd")
### Run pheatmap
pheatmap(norm_OEsig,
color = heat_colors,
cluster_rows = T,
show_rownames = F,
annotation = annotation,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 10,
height = 20)
# top 1000 gene order by padj value
gene.ls = c(res.ampu.sig %>% arrange(padj) %>% select(gene))$gene[1:1000]
# res.ampu.sig
norm_OEsig <- normalized_counts[,c(1,2,3,4,5,6,7,8,9,10,11)] %>%
filter(gene %in% gene.ls) %>%
data.frame() %>%
column_to_rownames(var = "gene")
# normalized_counts
norm_OEsig
### Annotate our heatmap (optional)
annotation <- metadata %>%
select(sample, amputation) %>%
data.frame(row.names = "sample")
# annotation
### Set a color palette
heat_colors <- brewer.pal(6, "YlOrRd")
### Run pheatmap
pheatmap(norm_OEsig,
color = heat_colors,
cluster_rows = T,
show_rownames = F,
annotation = annotation,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 10,
height = 20)
# top 1000 gene order by padj value
gene.ls = c(res.ampu.sig %>% arrange(padj) %>% select(gene))$gene[1:1000]
# res.ampu.sig
norm_OEsig <- normalized_counts[,c(1,2,3,4,5,6,7,8,9,10,11)] %>%
filter(gene %in% gene.ls) %>%
data.frame() %>%
column_to_rownames(var = "gene")
# normalized_counts
# norm_OEsig
### Annotate our heatmap (optional)
annotation <- metadata %>%
select(sample, amputation) %>%
data.frame(row.names = "sample")
# annotation
### Set a color palette
heat_colors <- brewer.pal(6, "YlOrRd")
### Run pheatmap
pheatmap(norm_OEsig,
color = heat_colors,
cluster_rows = T,
show_rownames = F,
annotation = annotation,
border_color = NA,
fontsize = 10,
scale = "row",
fontsize_row = 10,
height = 20)
## Setup
library(tidyverse)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(DEGreport)
library(factoextra)
library("edgeR")
library("ggplot2")
library("dplyr")
library("ggrepel")
raw_counts <- read.table("../data/transcript_count_matrix.csv", header=T, row.names=1,sep = ",")
# filter out count rows with either fewer than 10 counts or over 4000 counts
filt_sel = rowSums(raw_counts[,1:10]>=10)>0
raw_counts = raw_counts[filt_sel,]
dim(raw_counts)
filt_sel = rowSums(raw_counts[,1:10]<4000)>0
raw_counts = raw_counts[filt_sel,]
dim(raw_counts)
sample_anno = read.csv("../data/sample_name_Aurelia.csv",header = FALSE,stringsAsFactors = FALSE)
colnames(raw_counts) = as.character(rev(sample_anno$V4))
metadata = read.table("../data/metadata.txt", header=T, row.names=1,sep = ",")
metadata
all(colnames(raw_counts) == rownames(metadata))
dds <- DESeqDataSetFromMatrix(countData = raw_counts, colData = metadata, design = ~ treatment)
rld <- rlog(dds, blind=TRUE)
# color by whether a regeneration response is excited
plotPCA(rld, intgroup="regeneration")
# color by the feeding/non-feeding/0hr blank
plotPCA(rld, intgroup="treatment")
# color by the whether is regeneration response is stimulated
plotPCA(rld, intgroup="response")
rld_mat <- assay(rld)
rld_cor <- cor(rld_mat)
pheatmap(rld_cor)
dds <- DESeq(dds)
normalized_counts <- counts(dds, normalized=TRUE)
# write.csv(normalized_counts,file = "../data/normalized_counts.csv")
dds <- DESeqDataSetFromMatrix(countData = raw_counts, colData = metadata, design = ~ amputation)
dds <- DESeq(dds)
#amputation VS pre-amputation
contrast.ampu = c("amputation", "amputated", "pre_amputated")
# Output results of Wald test for contrast
res.ampu <- results(dds, contrast = contrast.ampu)
### Set thresholds
padj.cutoff <- 0.05
lfc.cutoff <- 1.5
res.ampu.tb <- res.ampu %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
res.ampu.sig <- res.ampu.tb %>%
dplyr::filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
res.ampu.sig
# top 1000 gene order by padj value
gene.ls = c(res.ampu.sig %>% arrange(padj) %>% select(gene))$gene[1:1000]
# res.ampu.sig
norm_OEsig <- normalized_counts[,c(1,2,3,4,5,6,7,8,9,10,11)] %>%
filter(gene %in% gene.ls) %>%
data.frame() %>%
column_to_rownames(var = "gene")
## Setup
library(tidyverse)
library(RColorBrewer)
library(DESeq2)
library("DESeq2")
install.packages("BiocManager")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("pheatmap")
install.packages("ggrepel")
install.packages("devtools")
install.packages("tidyverse")
BiocManager::install("DESeq2")
BiocManager::install("DEGreport")
BiocManager::install("edgeR")
## Setup
library(tidyverse)
library(RColorBrewer)
library("DESeq2")
install.packages("XML")
## Setup
library(tidyverse)
library(RColorBrewer)
library("DESeq2")
install.packages("RSQLite")
## Setup
library(tidyverse)
library(RColorBrewer)
library("DESeq2")
library(pheatmap)
library(DEGreport)
packageDescription("Cairo")
